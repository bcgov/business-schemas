/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export type TheCacheIdOfTheMostCurrentLedgerRecord = number;
export type TheTimestampOfTheMostCurrentLedgerRecord = string;
export type TheTimestampOfTheLastLedgerRecordBeforeDataLoadFromCobrsByBob = string;
export type TheDissolutionDateSchema = string;
export type TheFiscalYearEndDateSchema = string;
export type TheFoundingDateSchema = string;
export type TheIdentifierSchema = string;
export type TheLegalNameSchema = string;
export type TheLegalTypeOfTheBusiness =
  | "A"
  | "B"
  | "BC"
  | "BEN"
  | "C"
  | "CC"
  | "CCC"
  | "CEM"
  | "CP"
  | "CS"
  | "CUL"
  | "EPR"
  | "FI"
  | "FOR"
  | "GP"
  | "LIC"
  | "LIB"
  | "LL"
  | "LLC"
  | "LP"
  | "MF"
  | "PA"
  | "PAR"
  | "PFS"
  | "QA"
  | "QB"
  | "QC"
  | "QD"
  | "QE"
  | "REG"
  | "RLY"
  | "S"
  | "SB"
  | "SP"
  | "T"
  | "TMY"
  | "ULC"
  | "UQA"
  | "UQB"
  | "UQC"
  | "UQD"
  | "UQE"
  | "XCP"
  | "XL"
  | "XP"
  | "XS";
export type TheTaxIdSchema = string;
export type TheStateOfTheBusiness = "ACTIVE" | "HISTORICAL" | "LIQUIDATION";
export type TheLinkToTheFilingThatChangedTheBusinessStateIfApplicableS = string;
export type IndicatesWhetherTheBusinessIsInGoodStanding = boolean;
export type IndicatesWhetherTheBusinessIsInAdministrativeFreeze = boolean;
export type WarningCode = string;
export type WarningMessage = string;
export type WarningType = string;
export type TheLinkToTheFilingThatResultedInTheNonCompliance = string;
export type HasPreExistingCompanyProvisions = boolean;
export type TheTypeOfNameRequest = string;
export type NameTranslation = string;
export type TheTypeOfTranslation = "TRANSLATION" | "DBA";
export type NameTranslations = {
  id?: string;
  name: NameTranslation;
  type?: TheTypeOfTranslation;
  [k: string]: unknown;
}[];
export type ResolutionDates = string[];
export type TheNameOfTheShareClass = string;
export type TheDisplayOrderOfTheSharesThatIndicatesPriority = number;
export type MaximumNumberOfSharesInTheClass = number | null;
export type InitialValueOfEachShare = number | null;
export type HasMaximumNumberOfShares = boolean;
export type HasInitialValueOfEachShare = boolean;
export type HasSpecialRightsOrRestrictions = boolean;
export type TheNameOfTheShareSeries = string;
export type TheDisplayOrderThatIndicatesPriority = number;
export type MaximumNumberOfSharesInTheSeries = number | null;
export type HasMaximumNumberOfShares1 = boolean;
export type HasSpecialRightsOrRestrictions1 = boolean;
export type ShareClasses = ShareClass[];
export type TheAssociationTypeForCooperativeFiling = "CP" | "HC" | "CSC";
export type TheIdentifierForRulesFileInFileServer = string;
export type TheFileNameWhileUploading = string;
export type TheIdentifierForMemorandumFileInFileServer = string;
export type TheFileNameWhileUploading1 = string;

export interface AlterationFiling {
  alteration: {
    business: TheBusinessSchema;
    contactPoint: BusinessContactPointSchema;
    provisionsRemoved?: HasPreExistingCompanyProvisions;
    nameRequest?: NameRequestSchema;
    nameTranslations?: NameTranslations;
    shareStructure?: {
      resolutionDates?: ResolutionDates;
      shareClasses?: ShareClasses;
      [k: string]: unknown;
    };
    courtOrder?: CourtOrder;
    cooperativeAssociationType?: TheAssociationTypeForCooperativeFiling;
    rulesFileKey?: TheIdentifierForRulesFileInFileServer;
    rulesFileName?: TheFileNameWhileUploading;
    memorandumFileKey?: TheIdentifierForMemorandumFileInFileServer;
    memorandumFileName?: TheFileNameWhileUploading1;
    [k: string]: unknown;
  };
  [k: string]: unknown;
}
export interface TheBusinessSchema {
  cacheId?: TheCacheIdOfTheMostCurrentLedgerRecord;
  lastLedgerTimestamp?: TheTimestampOfTheMostCurrentLedgerRecord;
  lastPreBobFilingTimestamp?: TheTimestampOfTheLastLedgerRecordBeforeDataLoadFromCobrsByBob;
  dissolutionDate?: TheDissolutionDateSchema;
  fiscalYearEndDate?: TheFiscalYearEndDateSchema;
  foundingDate?: TheFoundingDateSchema;
  identifier: TheIdentifierSchema;
  legalName?: TheLegalNameSchema;
  legalType?: TheLegalTypeOfTheBusiness;
  taxId?: TheTaxIdSchema;
  state?: TheStateOfTheBusiness;
  stateFiling?: TheLinkToTheFilingThatChangedTheBusinessStateIfApplicableS;
  goodStanding?: IndicatesWhetherTheBusinessIsInGoodStanding;
  adminFreeze?: IndicatesWhetherTheBusinessIsInAdministrativeFreeze;
  warnings?: Warning[];
  naics?: NAICS;
  /**
   * A brief note to explain the nature of business.
   */
  natureOfBusiness?: string;
  [k: string]: unknown;
}
export interface Warning {
  code?: WarningCode;
  message?: WarningMessage;
  warningType?: WarningType;
  filing?: TheLinkToTheFilingThatResultedInTheNonCompliance;
  [k: string]: unknown;
}
export interface NAICS {
  naicsCode?: string;
  naicsDescription?: string;
  [k: string]: unknown;
}
export interface BusinessContactPointSchema {
  email: string;
  phone?: string;
  extension?: number;
  [k: string]: unknown;
}
export interface NameRequestSchema {
  nrNumber?: string;
  legalName?: string;
  legalType: TheLegalTypeOfTheBusiness;
  requestType?: TheTypeOfNameRequest;
  status?: string;
  expires?: string;
  consent?: string;
  submittedBy?: string;
  address?: TheAddressSchema;
  [k: string]: unknown;
}
export interface TheAddressSchema {
  streetAddress: string;
  streetAddressAdditional?: string;
  addressCity: string;
  addressCountry: string;
  addressRegion: string | null;
  postalCode: string;
  deliveryInstructions?: string | null;
  [k: string]: unknown;
}
export interface ShareClass {
  name: TheNameOfTheShareClass;
  priority: TheDisplayOrderOfTheSharesThatIndicatesPriority;
  maxNumberOfShares: MaximumNumberOfSharesInTheClass;
  parValue: InitialValueOfEachShare;
  currency: string | null;
  hasMaximumShares: HasMaximumNumberOfShares;
  hasParValue: HasInitialValueOfEachShare;
  hasRightsOrRestrictions: HasSpecialRightsOrRestrictions;
  series?: ShareSeries[];
  [k: string]: unknown;
}
export interface ShareSeries {
  name: TheNameOfTheShareSeries;
  priority: TheDisplayOrderThatIndicatesPriority;
  maxNumberOfShares: MaximumNumberOfSharesInTheSeries;
  hasMaximumShares: HasMaximumNumberOfShares1;
  hasRightsOrRestrictions: HasSpecialRightsOrRestrictions1;
  [k: string]: unknown;
}
export interface CourtOrder {
  /**
   * The court assigns each court order a unique file number up to 20 characters in length.
   */
  fileNumber: string;
  /**
   * The date and time of the court order.
   */
  orderDate?: string;
  /**
   * planOfArrangement
   */
  effectOfOrder?: string;
  /**
   * A brief note to explain the purpose of the Court Order.
   */
  orderDetails?: string;
  [k: string]: unknown;
}
